import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Hgenerator extends Thread {
	private int x;
	private int y;
	private String symbol;
	private Intersection intersection;
	private int generateSpeed;
	private String direction;
	private int spec;
	private boolean signal;
	private List<Car> carList;	//hold the car generated by the generator
	private double overallTime;	//record the time the car traveling through the grid

	
	public Hgenerator(Intersection intersection,String symbol,int speed,String direction,int spec) {
		this.intersection=intersection;
		this.symbol=symbol;
		this.generateSpeed=speed;
		this.direction=direction;
		this.spec=spec;
		carList=new ArrayList<>();
	}
	
	/**
	 * generate car from west to east or from east to west
	 * It is up to the choice of the main method(APSpec1 or APSpec2)
	 * @return Car object
	 */
	public Car generateCar() {
		Random ran=new Random();
		int rowBoundary=intersection.getRows(); 
		int colBoundary=intersection.getColumns();
		Car geCar=null;
		if(spec==1) {
			x=ran.nextInt(rowBoundary);
			y=0;
			geCar=new Car(x,y,symbol,intersection,direction);
		}else if(spec==2) {
			switch(direction) {
			case "WE":
				x=ran.nextInt(rowBoundary/2);
				y=0;
				break;
			case "EW":
				x=ran.nextInt(rowBoundary/2)+rowBoundary/2;
				y=colBoundary-1;
				break;
			}
			geCar=new Car(x,y,symbol,intersection,direction);
		}
		return geCar;	
	}
	
	public void run() {
		while(!intersection.isSignal()) {
			try {
				sleep(generateSpeed);
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
			startCar();
		}
		getSumTravelTime();
	}
	
	/**
	 *start the car thread
	 */
	public void startCar() {
		Car geCar=generateCar();
		carList.add(geCar);	//after generating a car, add it to the car list
		geCar.addCar();
		geCar.start();
	}
	
	/**
	 * calculate the time each generator takes all vehicles it generates to travel through the grid
	 */
	public void getSumTravelTime() {
		for(Car car:carList) {
			overallTime=car.getGridTime()+overallTime;
		}
	}
	
	public List<Car> getCarList() {
		return carList;
	}

	public void setCarList(List<Car> carList) {
		this.carList = carList;
	}

	public String getDirection() {
		return direction;
	}

	public boolean isSignal() {
		return signal;
	}

	public void setSignal(boolean signal) {
		this.signal = signal;
	}

	public double getOverallTime() {
		return overallTime;
	}

	public void setOverallTime(double overallTime) {
		this.overallTime = overallTime;
	}
}
