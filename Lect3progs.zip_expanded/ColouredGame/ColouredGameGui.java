/*
 * ColouredGameGUI.java
 * Defines a GUI interface to enable a guessing game to be played
 */

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class ColouredGameGui extends JFrame implements ActionListener
{
	//component instance variables
	private JButton tryButton;//to register a guess
	private JButton newButton;//to ask for a new game
	private JTextField inField;//to input guesses
	private JTextField outField;//to display results
	private JPanel topPanel,bottomPanel;//for layout 
	private JPanel midPanel;//to give coloured feedback
	private JLabel inPrompt;
	//other instance variables
	private final int MAX_TRIES = 2;
	private QuizSetter myGame;//current question
	private int numTries;//number of guesses so far

	/** Creates a new instance of GameGUI */
	public ColouredGameGui()
	{
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setTitle("Guess a number");
		this.layoutComponents();
		this.initialiseGame();
	}

	/**  adds all components to underlying frame 
	 * and sets up action event listening
	 */  
	public void layoutComponents()
	{
		//layout the top
		topPanel = new JPanel();
		inPrompt = new JLabel("type guess (between 1 and 10) here");
		topPanel.add(inPrompt);
		inField = new JTextField(5);
		topPanel.add(inField);
		tryButton = new JButton("OK");
		tryButton.addActionListener(this);
		topPanel.add(tryButton);
		this.add(topPanel,BorderLayout.NORTH);
		//layout the centre
		midPanel= new JPanel();
		this.add(midPanel,BorderLayout.CENTER);
		//layout the bottom
		bottomPanel= new JPanel();
		outField = new JTextField(30);
		outField.setEditable(false);
		bottomPanel.add(outField);
		newButton = new JButton("New Game");
		newButton.addActionListener(this);
		bottomPanel.add(newButton);
		this.add(bottomPanel,BorderLayout.SOUTH);

	}   

	/** instantiates a new QuizSetter object 
	 *initialises non GUI instance variables
	 */
	public void initialiseGame()
	{
		myGame = new QuizSetter();
		tryButton.setEnabled(true);
		numTries=0;
		inField.setText("");
		outField.setText("");
		inField.requestFocus();
		midPanel.setBackground(Color.gray);
	}

	/** process a guess that is not the last guess
	 * gets a valid guess from text field
	 * increments the number of guesses taken
	 * outputs congratulations if the guess is correct
	 * or help and a message to try again if the guess is incorrect
	 */
	public void processAGuess()
	{
		int guess=this.getValidGuess();
		if (guess>0 && guess<=10) //ignore guesses that are out of range
		{
			numTries++;
			if (myGame.guessCorrect(guess))
			{
				outField.setText("You got the correct answer after " +
						numTries+" guess"); 
				midPanel.setBackground(Color.yellow);
			}
			else
			{//deal with an incorrect guess
				String output = "";
				midPanel.setBackground(Color.blue);
				if (myGame.guessClose(guess))
				{
					output = output+"Close but...";
					midPanel.setBackground(Color.pink);
				}
				if (myGame.guessTooBig(guess))
					output = output+"Too big!";
				else
					output = output+"Too small!";
				output = output+" Try again.";
				outField.setText(output);
				//clean up inField ready to accept another guess
				inField.setText("");
				inField.requestFocus();
			}
		}

	}

	/** process  the last guess
	 * gets a valid guess from text field
	 * increments the number of guesses taken
	 * outputs congratulations if the guess is correct
	 * or commiseration and the correct answer if the guess is incorrect
	 */
	public void processLastGuess()
	{
		int guess=this.getValidGuess();
		if (guess>0 && guess <=10) //ignore guesses that are out of range
		{
			numTries++;
			if (myGame.guessCorrect(guess))
			{
				outField.setText("You got the correct answer after "
						+ numTries+" guesses"); 
				midPanel.setBackground(Color.yellow);
			}
			else
			{
				midPanel.setBackground(Color.blue);
				if (myGame.guessClose(guess))
					midPanel.setBackground(Color.pink);
				outField.setText("Bad Luck! The correct answer is "
						+myGame.getAnswer());
			}
			tryButton.setEnabled(false);
		}
	}

	//parses the string in inField
	//returns its integer value if it is a valid guess between 1 & 10
	//otherwise returns 0
	private int getValidGuess()
	{
		String guessStr = inField.getText().trim();
		int guess=0;
		try
		{
			guess=Integer.parseInt(guessStr);
			//if here then parse has been successful
			//but the number might still be out of range
			if (guess<=0||guess>10)
				throw new NumberFormatException();

		}
		catch (NumberFormatException nfe)
		{
			inField.setText("");//just ignore a stupid entry
			JOptionPane.showMessageDialog(this,
					"you must enter a number between 1 and 10",
					"Warning", JOptionPane.ERROR_MESSAGE);
		}
		return guess;
	}

	/** identifies and processes ActionEvents generated by components
	 *@param ae the ActionEvent generated
	 */
	public void actionPerformed(ActionEvent ae)
	{
		if (ae.getSource()==tryButton)
		{

			if(numTries<MAX_TRIES-1)
			{
				this.processAGuess();
			}
			else 
			{
				this.processLastGuess();
			}
		}
		if (ae.getSource()==newButton)
			this.initialiseGame();	
	}
}

